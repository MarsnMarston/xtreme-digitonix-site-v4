import { NextResponse } from "next/server";
import nodemailer from "nodemailer";

export async function POST(req: Request) {
  const debug: any = { stage: "start", ts: new Date().toISOString() };

  try {
    const body = await req.json().catch((e) => {
      debug.jsonError = String(e);
      return {};
    });
    const { name, email, service, message } = body as any;
    debug.payload = { name, email, service, hasMessage: !!message };

    const host = process.env.SMTP_HOST || "";
    const port = Number(process.env.SMTP_PORT || "587");
    const user = process.env.SMTP_USER || "";
    const pass = process.env.SMTP_PASS ? "***" : "(missing)";
    const fromEmail = process.env.FROM_EMAIL || user;
    const toEmail = process.env.TO_EMAIL || user;

    const secure = port === 465;

    debug.env = {
      host,
      port,
      secure,
      user,
      passPresent: process.env.SMTP_PASS ? true : false,
      fromEmail,
      toEmail,
    };

    // Immediately fail if weâ€™re missing critical envs
    if (!host || !port || !user || !process.env.SMTP_PASS) {
      debug.stage = "env-missing";
      return NextResponse.json(
        { ok: false, debug, error: "Missing SMTP_* environment variables" },
        { status: 500 }
      );
    }

    const transporter = nodemailer.createTransport({
      host,
      port,
      secure,
      auth: { user, pass: process.env.SMTP_PASS! },
      logger: true,
      debug: true,
      tls: { rejectUnauthorized: false },
    });

    // Verify connection
    try {
      debug.stage = "verify";
      await transporter.verify();
      debug.verify = "OK";
    } catch (e: any) {
      debug.verify = "FAIL";
      debug.verifyError = String(e?.message || e);
      debug.stage = "verify-fail";
      return NextResponse.json({ ok: false, debug }, { status: 500 });
    }

    // Send email
    debug.stage = "send";
    const info = await transporter.sendMail({
      from: `"${name || "Website"}" <${fromEmail}>`,
      to: toEmail,
      replyTo: email || fromEmail,
      subject: `New Contact: ${service || "General"}`,
      text: `Name: ${name}\nEmail: ${email}\nService: ${service}\n\n${message}`,
      html: `
        <h2>New Contact Message</h2>
        <p><strong>Name:</strong> ${name}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>Service:</strong> ${service}</p>
        <p><strong>Message:</strong><br/>${(message || "")
          .toString()
          .replace(/\n/g, "<br/>")}</p>
      `,
    });

    debug.stage = "sent";
    debug.sent = {
      messageId: info.messageId,
      envelope: info.envelope,
      response: info.response,
    };

    return NextResponse.json({ ok: true, debug });
  } catch (err: any) {
    debug.stage = "catch";
    debug.catch = String(err?.message || err);
    return NextResponse.json({ ok: false, debug }, { status: 500 });
  }
}
