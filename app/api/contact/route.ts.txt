// app/api/contact/route.ts
import { NextResponse } from "next/server";
import nodemailer from "nodemailer";

export const runtime = "nodejs"; // ⬅️ important for nodemailer
export const dynamic = "force-dynamic";

function j(data: any) {
  try { return JSON.stringify(data); } catch { return String(data); }
}

export async function POST(req: Request) {
  let payload: any = {};
  try {
    payload = await req.json();
    console.log("[CONTACT] payload", j(payload));

    const { name, email, service, message } = payload || {};
    if (!name || !email || !message) {
      console.error("[CONTACT] missing fields", j({ name, email, message }));
      return NextResponse.json(
        { ok: false, error: "Required fields missing" },
        { status: 400 }
      );
    }

    // ENV values
    const SMTP_HOST = process.env.SMTP_HOST || "smtp.hostinger.com";
    const SMTP_PORT = Number(process.env.SMTP_PORT || 465);
    const SMTP_USER = process.env.SMTP_USER;
    const SMTP_PASS = process.env.SMTP_PASS;
    const FROM_EMAIL = process.env.FROM_EMAIL || SMTP_USER;
    const TO_EMAIL = process.env.TO_EMAIL || SMTP_USER;

    console.log("[ENV] host", SMTP_HOST, "port", SMTP_PORT, "user", SMTP_USER, "to", TO_EMAIL);

    if (!SMTP_USER || !SMTP_PASS) {
      console.error("[ENV] Missing SMTP_USER / SMTP_PASS");
      return NextResponse.json(
        { ok: false, error: "Email service not configured" },
        { status: 500 }
      );
    }

    // Transporter (465 = SSL)
    const transporter = nodemailer.createTransport({
      host: SMTP_HOST,
      port: SMTP_PORT,
      secure: SMTP_PORT === 465, // SSL on 465, STARTTLS on 587
      auth: { user: SMTP_USER, pass: SMTP_PASS },
    });

    console.log("[MAILER] calling verify()");
    await transporter.verify();
    console.log("[MAILER] verify() OK");

    const info = await transporter.sendMail({
      from: `Xtreme Digitonix <${FROM_EMAIL}>`,
      to: TO_EMAIL,
      replyTo: email, // reply goes to the person who filled the form
      subject: `New Contact: ${service || "General"}`,
      text: `Name: ${name}\nEmail: ${email}\nService: ${service}\nMessage:\n${message}`,
      html: `
        <h2>New Contact</h2>
        <p><b>Name:</b> ${name}</p>
        <p><b>Email:</b> ${email}</p>
        <p><b>Service:</b> ${service}</p>
        <p><b>Message:</b><br>${(message || "").replace(/\n/g, "<br>")}</p>
      `,
    });

    console.log("[MAILER] sendMail() OK", j({ messageId: info.messageId }));
    return NextResponse.json({ ok: true });
  } catch (err: any) {
    console.error("[MAILER] ERROR", err?.message || err, j(err));
    return NextResponse.json({ ok: false, error: err?.message || "Send failed" }, { status: 500 });
  }
}
