import { NextResponse } from "next/server";
import nodemailer from "nodemailer";

export async function POST(req: Request) {
  try {
    const { name, email, service, message } = await req.json();

    if (!name || !email || !message) {
      return NextResponse.json(
        { success: false, error: "Missing required fields." },
        { status: 400 }
      );
    }

    // --- Read ENV (with defaults) ---
    const SMTP_HOST = process.env.SMTP_HOST || "smtp.hostinger.com";
    const SMTP_PORT = Number(process.env.SMTP_PORT || "465");
    const SMTP_USER = process.env.SMTP_USER!;
    const SMTP_PASS = process.env.SMTP_PASS!;
    const TO_EMAIL = process.env.TO_EMAIL || "support@xtremedigitonix.com";
    const FROM_EMAIL = process.env.FROM_EMAIL || SMTP_USER;

    // --- Nodemailer Transport ---
    // Hostinger supports:
    //   - 465 (secure: true)
    //   - 587 (secure: false, TLS upgrade)
    const transporter = nodemailer.createTransport({
      host: SMTP_HOST,
      port: SMTP_PORT,
      secure: SMTP_PORT === 465,
      auth: { user: SMTP_USER, pass: SMTP_PASS },
      logger: true, // log to console (visible in Vercel Runtime Logs)
    });

    // Verify SMTP connection first (super helpful for debugging)
    await transporter.verify();

    const mailOptions = {
      from: `"${name}" <${FROM_EMAIL}>`, // must be your authenticated mailbox
      to: TO_EMAIL,                      // send to your support mailbox (or your Gmail for testing)
      subject: `New Contact Form Submission - ${service || "General"}`,
      text: `Name: ${name}\nEmail: ${email}\nService: ${service}\nMessage: ${message}`,
      html: `
        <h2>New Contact Form Submission</h2>
        <p><strong>Name:</strong> ${name}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>Service:</strong> ${service || "General"}</p>
        <p><strong>Message:</strong> ${message}</p>
      `,
      replyTo: email, // so you can click "Reply" to the sender
    };

    const info = await transporter.sendMail(mailOptions);
    console.log("MAIL SENT:", {
      messageId: info.messageId,
      response: info.response,
      envelope: info.envelope,
    });

    return NextResponse.json({ success: true, message: "Email sent successfully!" });
  } catch (error: any) {
    console.error("EMAIL ERROR:", error?.message || error);
    // Helpful hint for 465 vs 587 mismatch
    console.error("Tip: If you used port 465 and this failed, try port 587 with secure=false.");

    return NextResponse.json(
      { success: false, error: error?.message || "Email send failed" },
      { status: 500 }
    );
  }
}
